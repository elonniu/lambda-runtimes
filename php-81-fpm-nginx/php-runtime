#!/usr/bin/env bash

set -e

dir=/opt/php

usage() {
  echo "usage: $0 COMMAND"
  echo
  echo "Manage php source tarball lifecycle."
  echo
  echo "Commands:"
  echo "   enable_extensions  Enable all extensions by exists so files."
  echo "   copy_libs          Copy all lib to your /opt/lib in builder layer."
  echo "   layer              Make an Lambda layer zip."
  echo
}

check() {

  if [ ! -f "/devel_runtime_lock" ]; then
    echo "The php-runtime command can only run in devel layer: public.ecr.aws/awsguru/devel:{tag}"
    exit 1
  fi

  if [ ! -d "/bak/usr/lib64" ]; then
    echo "Please add 'COPY --from=public.ecr.aws/lambda/provided:al2 /usr/lib64 /bak/usr/lib64' to your Dockerfile."
    exit 1
  fi

}

copy_all_libs() {
  for file in $(ls /opt/php/extensions/*.so); do
    copy_libs $file
  done

  copy_libs /opt/php/bin/php
  copy_libs /opt/php/bin/php-fpm
}

copy_libs() {
  echo ""
  echo "Copy $1 Libraries"
  echo ""
  mkdir -p /opt/lib
  chmod +x $1
  for lib in $(ldd $1); do
    if [ -f "$lib" ]; then
      echo $lib
      cp $lib /opt/lib
    fi
  done
}

clean_libs() {

  for lib in $(ls /opt/lib); do
    if [ -f "/bak/usr/lib64/$lib" ]; then
      rm -rf "/opt/lib/$lib"
    fi
  done

}

run() {
  check
  enable_extensions
  copy_all_libs
  clean_libs
  runtime
}

runtime() {
  mkdir -p /tmp/opt

  cp -r /opt/bootstrap /tmp/opt/bootstrap
  cp -r /opt/extensions /tmp/opt/extensions
  cp -r /opt/lib /tmp/opt/lib

  mkdir -p /tmp/opt/nginx
  cp -r /opt/nginx/bin /tmp/opt/nginx/bin
  cp -r /opt/nginx/conf /tmp/opt/nginx/conf

  mkdir -p /tmp/opt/php/bin
  mkdir -p /tmp/opt/php/etc
  cp -r /opt/php/bin/php /tmp/opt/php/bin/php
  cp -r /opt/php/bin/php-fpm /tmp/opt/php/bin/php-fpm
  cp -r /opt/php/php.d /tmp/opt/php/php.d
  cp -r /opt/php/php.ini /tmp/opt/php/php.ini
  cp -r /opt/php/etc/php-fpm.conf /tmp/opt/php/etc/php-fpm.conf
  cp -r /opt/php/extensions /tmp/opt/php/extensions

  rm -rf /opt
  mv /tmp/opt /opt
}

enable_extensions() {
  extension_arr_new=()

  for so in $(ls /opt/php/extensions/*.so); do
    if readelf --wide --syms $so | grep -q ' zend_extension_entry$'; then
      line="zend_extension=$so"
    else
      line="extension=$so"
    fi
    extension_arr_new+=($line)
  done

  echo ${extension_arr_new[*]} | tr ' ' '\n' | sort -n >/opt/php/php.d/extensions.ini

  cat /opt/php/php.d/extensions.ini
}

case "$1" in

enable_extensions)
  enable_extensions
  ;;

copy_libs)
  copy_all_libs && clean_libs
  ;;

*)
  run
  cd /opt
  zip --quiet --recurse-paths /layer.zip .
  echo "Lambda Layer file is /layer.zip($(du -sh /layer.zip)"
  ;;
esac
